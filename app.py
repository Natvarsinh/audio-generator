import streamlit as st
from gtts import gTTS
import tempfile
import os

st.set_page_config(page_title="Text to Audio Generator", layout="centered")

# Language label mappings
lang_options = {
    "English": {
        "title": "ЁЯОз Text to Audio Generator",
        "desc": "Enter your text below, click **Generate**, and listen or download the audio.",
        "text_input": "ЁЯУЭ Enter Text",
        "generate": "ЁЯФК Generate Audio",
        "warn_empty": "Please enter some text to convert.",
        "success": "тЬЕ Audio generated!",
        "download": "тмЗя╕П Download Audio",
        "lang_label": "ЁЯМР Select UI Language"
    },
    "Hindi": {
        "title": "ЁЯОз рдЯреЗрдХреНрд╕реНрдЯ рд╕реЗ рдСрдбрд┐рдпреЛ рдЬрдирд░реЗрдЯрд░",
        "desc": "рдЕрдкрдирд╛ рдЯреЗрдХреНрд╕реНрдЯ рдиреАрдЪреЗ рджрд░реНрдЬ рдХрд░реЗрдВ, **рдЬрдирд░реЗрдЯ** рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ, рдФрд░ рдСрдбрд┐рдпреЛ рд╕реБрдиреЗрдВ рдпрд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВред",
        "text_input": "ЁЯУЭ рдЯреЗрдХреНрд╕реНрдЯ рджрд░реНрдЬ рдХрд░реЗрдВ",
        "generate": "ЁЯФК рдСрдбрд┐рдпреЛ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ",
        "warn_empty": "рдХреГрдкрдпрд╛ рдХрдиреНрд╡рд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рдЯреЗрдХреНрд╕реНрдЯ рджрд░реНрдЬ рдХрд░реЗрдВред",
        "success": "тЬЕ рдСрдбрд┐рдпреЛ рдЬрдирд░реЗрдЯ рд╣реЛ рдЧрдпрд╛!",
        "download": "тмЗя╕П рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "lang_label": "ЁЯМР рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ"
    },
    "Gujarati": {
        "title": "ЁЯОз рк▓ркЦрк╛ркгркерлА ркСркбрк┐ркпрлЛ ркЬркирк░рлЗркЯрк░",
        "desc": "ркдркорк╛рк░рлБркВ рк▓ркЦрк╛ркг ркирлАркЪрлЗ ркжрк╛ркЦрк▓ ркХрк░рлЛ, **ркЬркирк░рлЗркЯ ркХрк░рлЛ** ркХрлНрк▓рк┐ркХ ркХрк░рлЛ ркЕркирлЗ ркСркбрк┐ркпрлЛ рк╕рк╛ркВркнрк│рлЛ ркХрлЗ ркбрк╛ркЙркирк▓рлЛркб ркХрк░рлЛ.",
        "text_input": "ЁЯУЭ рк▓ркЦрк╛ркг ркжрк╛ркЦрк▓ ркХрк░рлЛ",
        "generate": "ЁЯФК ркСркбрк┐ркпрлЛ ркЬркирк░рлЗркЯ ркХрк░рлЛ",
        "warn_empty": "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХркирлНрк╡рк░рлНркЯ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ рк▓ркЦрк╛ркг ркжрк╛ркЦрк▓ ркХрк░рлЛ.",
        "success": "тЬЕ ркСркбрк┐ркпрлЛ ркЬркирк░рлЗркЯ ркеркпрлЛ!",
        "download": "тмЗя╕П ркСркбрк┐ркпрлЛ ркбрк╛ркЙркирк▓рлЛркб ркХрк░рлЛ",
        "lang_label": "ЁЯМР ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ"
    }
}

# Persist language selection in session state
if "selected_lang" not in st.session_state:
    st.session_state.selected_lang = "English"

# Language selector
selected_ui_lang = st.selectbox(
    lang_options[st.session_state.selected_lang]["lang_label"],
    list(lang_options.keys()),
    index=list(lang_options.keys()).index(st.session_state.selected_lang),
    key="selected_lang"
)

# Use selected language dictionary
txt = lang_options[st.session_state.selected_lang]


# --- UI ---
st.title(txt["title"])
st.markdown(txt["desc"])

text_input = st.text_area(txt["text_input"], height=300)

if st.button(txt["generate"]):
    if not text_input.strip():
        st.warning(txt["warn_empty"])
    else:
        tts = gTTS(text_input, lang="hi")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
            tts.save(tmp_file.name)
            audio_path = tmp_file.name

        st.success(txt["success"])
        st.audio(audio_path, format="audio/mp3")

        with open(audio_path, "rb") as f:
            st.download_button(
                label=txt["download"],
                data=f,
                file_name="generated_audio.mp3",
                mime="audio/mp3"
            )

        os.remove(audio_path)